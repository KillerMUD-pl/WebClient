{"version":3,"sources":["common/system.js","common/commands.ts","common/hooks.ts","components/common/Ansi.tsx","store/Connection.tsx","store/Game.ts","store/App.ts","store/index.tsx","components/Command.tsx","components/Console.tsx","components/common/Settings.jsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CONN_STATUS_CODE","CONN_OK","CONN_REFUSED","CONN_TELNET_ERR","CONN_PROXY_ERR","CONN_CLOSED","CONN_CONTROL_MASKCHAR","CONN_CONTROL_UNMASKCHAR","PROMPT_TRIGGER","testCommandTree","type","phrase","next","getVisibility","document","visibilityState","anser","Anser","window","htmlEntReplacements","Map","htmlEntReplacer","entity","get","Ansi","props","input","text","parsed","replace","escapeCarriageReturn","ansiToHtml","remove_empty","use_classes","continue","__html","dangerouslySetInnerHTML","Connection","CONSOLE_LIMIT","BLOCK_FOLLOWED_BY_PRESS_ENTER_REGEX","console","Array","sock","keepAliveTimer","sanitizeCommand","cmd","he","decode","trim","sendKeepAlive","connected","sendCmd","this","io","settings","proxyProtocol","proxyHost","proxyPort","on","buf","addTelnetLines","status","setStatus","addEchoLine","resetConnection","maskEcho","setConnected","setKeepAlive","keepAlive","observable","echo","action","source","split","forEach","sourceLine","push","addTelnetLine","line","isConnected","sanitizedCmd","commands","length","firstLetter","substr","command","emit","fill","join","isEnabled","clearInterval","setInterval","consoleCount","raw","stripAnsi","formatted","key","className","Game","parseMap","map","areas","area","areaIdx","rooms","room","roomIdx","userData","Object","keys","userDataKey","parseInt","JSON","parse","e","fetchMap","defaultTheme","color","saturation","brightBoost","backgroundHinder","blackBoost","colorBase","colorTop","font","family","size","letterSpacing","lineHeight","App","updateTheme","theme","root","documentElement","cs","toIntStr","val","Math","round","toFixed","toString","maxNormal","maxBright","maxDim","blackBase","style","setProperty","loadSettings","defaultSettings","localStorage","getItem","jsonSettings","updateSettings","current","merge","setItem","stringify","WebFont","google","families","classes","fontactive","setFontLoaded","setThemeColor","setThemeFont","fontName","fontVariant","loadedFonts","showSettings","Store","conn","game","app","init","StoreContext","React","createContext","useStore","useContext","Command","observer","cmdRef","useRef","cursorPos","currentlyEntering","cmdHistory","cmdHistoryPointer","cmdValueBeforeArrowsWerePressed","documentVisibility","useState","setDocumentVisibility","handleVisibilityChange","useEffect","addEventListener","removeEventListener","useDocumentVisibility","focusToCmdLine","resetCmdLine","innerHTML","innerText","focus","select","start","moveCursorToEnd","updateCursorPos","setTimeout","pos","end","checkCmdLineForEmptyIssue","cleanUpCmd","maskInputChars","char","handleGlobalKeydown","event","includes","ctrlKey","metaKey","isCtrlPressed","currentTarget","srcElement","id","newEvent","KeyboardEvent","dispatchEvent","onfocus","ref","tabIndex","onKeyDown","cleanCmd","onCommand","preventDefault","selection","getSelection","selectAllChildren","selectAllCmdLine","Event","historyIndex","stopPropagation","onClick","onInput","outputLine","contentEditable","Console","consoleObj","consoleRef","isAtBottom","setIsAtBottom","scrollDown","el","parentElement","scrollTo","scrollHeight","handleNeedScrollEvent","isAtBottomNow","clientHeight","scrollTop","checkIsAtBottom","Settings","display","min","max","value","onChange","target","store","commandTree","toogleSettings","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50fa0487.chunk.js","sourcesContent":["module.exports = {\n  CONN_STATUS_CODE: {\n    CONN_OK: 'CONN_OK',\n    CONN_REFUSED: 'CONN_REFUSED',\n    CONN_TELNET_ERR: 'CONN_TELNET_ERR',\n    CONN_PROXY_ERR: 'CONN_PROXY_ERR',\n    CONN_CLOSED: 'CONN_CLOSED',\n    CONN_CONTROL_MASKCHAR: 'CONN_CONTROL_MASKCHAR',\n    CONN_CONTROL_UNMASKCHAR: 'CONN_CONTROL_UNMASKCHAR',\n  },\n  PROMPT_TRIGGER: '',\n}","export type TPhrase = {\n  type: 'cmd' | 'phrase',\n  phrase: string,\n  aliasPhrase?: string,   \n  next?: TCommandTree,\n}\n\nexport type TWord = {\n  type: 'word',\n  next?: TCommandTree,\n}\n\nexport type TFreeText = {\n  type: 'free',\n}\n\nexport type TCommandTree = Array<TPhrase|TWord|TFreeText>;\n\nconst testCommandTree: TCommandTree = [\n  { type: 'cmd', phrase: 'north' },\n  { type: 'cmd', phrase: 'south' },\n  { type: 'cmd', phrase: 'west' },\n  { type: 'cmd', phrase: 'east' },\n  { type: 'cmd', phrase: 'down' },\n  { type: 'cmd', phrase: 'up' },\n  {\n    type: 'cmd',\n    phrase: 'examine',\n    next: [\n      { type: 'phrase', phrase: 'cialo' },\n      { type: 'phrase', phrase: '2.cialo' },\n      { type: 'free' },\n    ],\n  },\n  {\n    type: 'cmd',\n    phrase: 'eat',\n    next: [\n      { type: 'phrase', phrase: 'racja' },\n      { type: 'phrase', phrase: '2.racja' },\n      { type: 'phrase', phrase: '3.racja' },\n    ],\n  },\n  {\n    type: 'cmd',\n    phrase: 'exits',\n  },\n  {\n    type: 'cmd',\n    phrase: 'estimate',\n    next: [\n      { type: 'phrase', phrase: 'test' },\n    ]\n  },\n  {\n    type: 'cmd',\n    phrase: 'enter',\n    next: [\n      { type: 'phrase', phrase: 'portal' },\n    ]\n  },\n  {\n    type: 'cmd',\n    phrase: 'scan',\n    next: [\n      { type: 'word' },\n    ],\n  },\n];\n\nexport {\n  testCommandTree,\n}","import { useState, useEffect } from 'react';\n\nconst getVisibility = () => {\n  if (typeof document === \"undefined\") return true;\n  return document.visibilityState;\n}\n\nexport const useDocumentVisibility = () => {\n  let [documentVisibility, setDocumentVisibility] = useState(getVisibility());\n\n  function handleVisibilityChange() {\n    setDocumentVisibility(getVisibility());\n  }\n\n  useEffect(() => {\n    window.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      window.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  return documentVisibility;\n}\n","import Anser from \"anser\";\nimport { escapeCarriageReturn } from \"escape-carriage\";\nimport * as React from \"react\";\n\nconst anser = new Anser();\n// @ts-ignore\nwindow.anser = anser;\nconst ansiToHTML = (input: string): string => {\n  input = escapeCarriageReturn(input);\n  return anser.ansiToHtml(input, {\n    remove_empty: false,\n    use_classes: false,\n    continue: true,\n  });\n}\ndeclare interface Props {\n  text: string;\n  className?: string;\n}\n\nconst htmlEntReplacements = new Map([\n  ['&', '&amp;'],\n  ['<', '&lt;'],\n  ['>', '&gt;'],\n  [\"'\", '&#39;'],\n  ['\"', '&quot;'],\n  ['\\n', '<br>'],\n]);\n\nconst htmlEntReplacer = (entity: string): string =>\n  htmlEntReplacements.get(entity) || entity;\n\nconst Ansi = (props: Props): JSX.Element => {\n  const { text } = props;\n  let parsed = ansiToHTML(text.replace(/[<>'\"&\\n]/g, htmlEntReplacer));\n  const __html = parsed === '' ? '&nbsp;' : parsed;\n\n  return (\n    <code\n      dangerouslySetInnerHTML={{ __html: __html + '<br>' }}\n    />\n  );\n}\n\nexport default Ansi;\n","import React from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport he from 'he';\nimport Ansi from '../components/common/Ansi';\nimport stripAnsi from 'strip-ansi';\n\nimport { observable, action } from 'mobx';\nimport { ConsoleLine, ConnSettings } from './types';\nimport { CONN_STATUS_CODE } from '../common/system';\n\nclass Connection {\n  CONSOLE_LIMIT = 1000;\n  BLOCK_FOLLOWED_BY_PRESS_ENTER_REGEX = /([\\s\\S]*)\\[Naci.nij Enter aby kontynuowa.\\]/;\n  /**\n   * The main console window will only receive React Nodes, they will never get changed.\n   * Therefore we are not observing the log itself, only its count.\n   */\n  console = new Array<ConsoleLine>();\n  @observable consoleCount = 0;\n  @observable connected: boolean = false;\n  @observable hasPrompt: boolean = false;\n  @observable status: string = '';\n  @observable maskEcho: boolean = false;\n\n  @observable settings: ConnSettings = {\n    echo: true,\n    keepAlive: true,\n    proxyProtocol: 'https',\n    proxyHost: 'killer-mud.pl',\n    proxyPort: '8080',\n  };\n\n  sock: Socket | null = null;\n  keepAliveTimer: number | null = null;\n\n  constructor() {\n    if (this.sock === null) {\n      this.sock = io(`${this.settings.proxyProtocol}://${this.settings.proxyHost}:${this.settings.proxyPort}/`);\n    }\n    this.sock.on('stream', (buf: string) => {\n      this.addTelnetLines(buf);\n    });\n    this.sock.on('status', (status: string) => {\n      this.setStatus(status);\n      switch (status) {\n        case CONN_STATUS_CODE.CONN_REFUSED:\n          this.addEchoLine(\"MUD server refused connection.\", 'error error--connection');\n          break;\n        case CONN_STATUS_CODE.CONN_TELNET_ERR:\n          this.addEchoLine(\"MUD server connection unsuccesfull.\", 'error error--connection');\n          break;\n        case CONN_STATUS_CODE.CONN_PROXY_ERR:\n          this.addEchoLine(\"Websocket proxy connection error.\", 'error error--connection');\n          break;\n        case CONN_STATUS_CODE.CONN_CLOSED:\n          this.addEchoLine(\"Telnet connection was closed.\", 'error error--connection');\n          this.resetConnection();\n          break;\n        case CONN_STATUS_CODE.CONN_CONTROL_MASKCHAR:\n          this.maskEcho = true;\n          break;\n        case CONN_STATUS_CODE.CONN_CONTROL_UNMASKCHAR:\n          this.maskEcho = false;\n          break;\n      }\n    });\n    this.sock.on('connected', () => {\n      this.resetConnection();\n      this.setConnected(true);\n    });\n    this.sock.on('disconnect', () => {\n      this.setConnected(false);\n    });\n    this.setKeepAlive(this.settings.keepAlive);\n  }\n\n  @action addTelnetLines = (source: string) => {\n    let sourceLines = source.replace(/\\r/g, '').split('\\n');\n    sourceLines.forEach((sourceLine) => {\n      this.console.push(this.addTelnetLine(sourceLine));\n    });\n  }\n\n  @action addEchoLine = (line: string, type: string = 'echo') => {\n    this.console.push(this.addTelnetLine(line || ' ', type));\n  }\n\n  @action resetConnection = () => {\n    this.maskEcho = false;\n  }\n\n  @action setConnected = (isConnected: boolean) => {\n    this.connected = isConnected;\n  }\n\n  @action setStatus = (status: string) => {\n    this.status = status;\n  }\n\n  @action sendCmd = (cmd: string) => {\n    if (!this.sock) {\n      return;\n    }\n\n    const sanitizedCmd = this.sanitizeCommand(cmd);\n\n    // splitting command by ;\n    // unless ; is first character\n    let commands = [];\n    if (cmd.length > 1) {\n      const firstLetter = sanitizedCmd.substr(0,1);\n      commands = sanitizedCmd.substr(1).split(';');\n      commands[0] = firstLetter + commands[0];\n    } else {\n      commands.push(sanitizedCmd);\n    }\n\n    commands.forEach((command) => {\n      if (!this.sock) { return; }\n      this.sock.emit('stream', command + '\\n');\n      if (this.settings.echo) {\n        const echo = this.maskEcho ? cmd.split('').fill('*').join('') : command;\n        this.addEchoLine(echo + '\\n');\n      }\n    });\n\n    this.setKeepAlive(this.settings.keepAlive);\n  }\n\n  @action setKeepAlive = (isEnabled: boolean) => {\n    this.settings.keepAlive = isEnabled;\n    if (isEnabled) {\n      if (this.keepAliveTimer) {\n        window.clearInterval(this.keepAliveTimer);\n      }\n      this.keepAliveTimer = window.setInterval(this.sendKeepAlive, 10000);\n    }\n  }\n\n  @action addTelnetLine = (source: string, type: string = 'block'): ConsoleLine => {\n    this.consoleCount++;\n    return {\n      raw: source,\n      text: stripAnsi(source),\n      formatted: <Ansi key={this.consoleCount} className={type} text={source} />,\n    };\n  }\n\n  sanitizeCommand = (cmd: string): string => {\n    return he.decode(cmd.trim().replace(/\\s+/g, ' '));\n  }\n\n  sendKeepAlive = () => {\n    if (this.connected) {\n      this.sendCmd('');\n    }\n  }\n}\n\nexport default Connection;\n","import { observable, action } from \"mobx\";\nimport { MapData } from \"./types\";\n\nclass Game {\n  @observable map: MapData | null = null;\n\n  constructor() {\n    this.fetchMap();\n  }\n\n  @action fetchMap = () => {\n    // import('../common/data/map/world.json')\n    //     .then((module) => {\n    //         this.loadMap(this.parseMap(module.default as MapData));\n    //     });\n  }\n\n  @action loadMap = (map: MapData) => {\n    this.map = map;\n  }\n\n  parseMap = (map: MapData): MapData => {\n    // some data juggling around user data from mudlet maps\n    // we store JSON values in there, and want to parse them back to objects\n    map.areas.forEach(\n      (area, areaIdx) => {\n        area.rooms.forEach(\n          (room, roomIdx) => {\n            if (room.userData) {\n              Object.keys(room.userData).forEach(\n                (userDataKey: string) => {\n                  // @ts-ignore\n                  const line = map.areas[areaIdx]?.rooms[roomIdx]?.userData[userDataKey];\n                  switch (userDataKey) {\n                    case 'vnum':\n                      // @ts-ignore\n                      if (map.areas[areaIdx]?.rooms[roomIdx]?.userData[userDataKey]) {\n                        // @ts-ignore\n                        map.areas[areaIdx].rooms[roomIdx].userData[userDataKey] = parseInt(line);\n                      };\n                      break;\n                    case 'sector':\n                      break;\n                    default:\n                      try {\n                        // @ts-ignore\n                        if (map.areas[areaIdx]?.rooms[roomIdx]?.userData[userDataKey]) {\n                          // @ts-ignore\n                          map.areas[areaIdx].rooms[roomIdx].userData[userDataKey] = JSON.parse(line);\n                        }\n                      } catch (e) {\n                      }\n                      break;\n                    }\n                }\n              )\n            }\n          }\n        )\n      }\n    );\n    return map;\n  } \n}\n\nexport default Game;\n","import { observable, action } from \"mobx\";\nimport { DeepPartial, Theme, Themecolor, ThemeFontSettings, Settings } from \"./types\";\nimport * as WebFont from 'webfontloader';\nimport merge from 'deepmerge';\n\nconst defaultTheme: Theme = {\n  color: {\n    saturation: 0.85,\n    brightBoost: 0.1,\n    backgroundHinder: 0.4,\n    blackBoost: 0.25,\n    colorBase: 12,\n    colorTop: 255,\n  },\n  font: {\n    family: 'Inconsolata',\n    size: 15, // in pixels\n    letterSpacing: 0, // in pixels\n    lineHeight: 100 // in percents\n  }\n};\n\nclass App {\n  @observable theme: Theme = defaultTheme;\n  @observable firstTime: boolean = true;\n  @observable loadedFonts: Array<string> = []; // array of strings like: 'Robot Mono:400'\n  @observable showSettings: boolean = false;\n\n  constructor() {\n    // loading fonts\n    WebFont.load({\n      google: {\n        families: [\n          'Roboto Mono:400,700',\n          'Inconsolata:400,700',\n          'Cousine:400,700',\n          'Source Code Pro:400,700',\n          'Anonymous Pro:400,700',\n          'Fira Code:400,700',\n          'IBM Plex Mono:400,700',\n          'Nanum Gothic Coding:400,700',\n          'Ubuntu Mono:400,700',\n        ]\n      },\n      classes: false,\n      fontactive: this.setFontLoaded,\n    });\n\n    // loading settings from local storage\n    this.loadSettings();\n    this.updateSettings();\n\n    // applying theme\n    this.setThemeColor(this.theme.color);\n    this.setThemeFont(this.theme.font);\n  }\n\n  @action setThemeColor = (color: Partial<Themecolor>) => {\n    this.theme = merge<Theme, DeepPartial<Theme>>(this.theme, { color });\n    this.updateSettings();\n    this.updateTheme(this.theme);\n  }\n\n  @action setThemeFont = (font: Partial<ThemeFontSettings>) => {\n    this.theme = merge<Theme, DeepPartial<Theme>>(this.theme, { font });\n    this.updateSettings();\n    this.updateTheme(this.theme);\n  }\n\n  @action setFontLoaded = (fontName: string, fontVariant: string) => {\n    this.loadedFonts.push(fontName + ':' + fontVariant.replace('n','') + '00');\n  }\n\n  @action toogleSettings = () => {\n    this.showSettings = !this.showSettings;\n  }\n\n\n  /** Sets colour and theme related variables and styles on document.body */\n  updateTheme = (theme: Theme) => {\n    const root = document.documentElement;\n    const cs = theme.color;\n\n    // CSS variables are written to body as string representing an integer number\n    // to avoid any issues with value types not matching what CSs properties expect\n    const toIntStr = (val: number) => Math.round(val).toFixed(0).toString();\n\n    const maxNormal = cs.colorTop * (1 - cs.brightBoost);\n    const maxBright = cs.colorTop;\n    const maxDim = cs.colorTop * (1 - cs.brightBoost) * (1 - cs.backgroundHinder);\n    const blackBase = cs.colorBase + (maxNormal - cs.colorBase) * cs.blackBoost;\n\n    root.style.setProperty('--colorBase', toIntStr(cs.colorBase));\n    root.style.setProperty('--maxNormal', toIntStr(maxNormal));\n    root.style.setProperty('--maxBright', toIntStr(maxBright));\n    root.style.setProperty('--maxDim', toIntStr(maxDim));\n    root.style.setProperty('--minNormal', toIntStr(cs.colorBase + ((maxNormal - cs.colorBase) * (1 - cs.saturation))));\n    root.style.setProperty('--minBright', toIntStr(cs.colorBase + ((maxBright - cs.colorBase) * (1 - cs.saturation))));\n    root.style.setProperty('--minDim', toIntStr(cs.colorBase + ((maxDim - cs.colorBase) * (1 - cs.saturation))));\n    root.style.setProperty('--blackBase', toIntStr(blackBase))\n    root.style.setProperty('--blackBright', toIntStr(blackBase * ( 1 + cs.brightBoost)));\n\n    root.style.setProperty('--fontFamily', theme.font.family);\n    root.style.setProperty('--fontSize', `${theme.font.size}px`);\n    root.style.setProperty('--letterSpacing', `${theme.font.letterSpacing}px`);\n    root.style.setProperty('--lineHeight', `${theme.font.lineHeight}%`);\n  }\n\n  loadSettings = () => {\n    const defaultSettings = {\n      theme: defaultTheme,\n    }\n    try {\n      const settings = localStorage.getItem('killermud');\n      if (!settings) {\n        return defaultSettings;\n      }\n      const jsonSettings = JSON.parse(settings);\n      this.theme = jsonSettings.theme;\n    } catch (e) {\n      return defaultSettings;\n    }\n  }\n\n  updateSettings = (settings?: DeepPartial<Settings>) => {\n    let current = { theme: this.theme };\n    if (settings) {\n      this.loadSettings();\n      current = merge<Settings, DeepPartial<Settings>>(current, settings);\n    } else {\n      current = { theme: this.theme };\n    }\n    localStorage.setItem('killermud', JSON.stringify(current));\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { observable, action } from 'mobx';\n\nimport Connection from \"./Connection\";\nimport Game from \"./Game\";\nimport App from \"./App\";\n\nexport class Store {\n  conn: Connection;\n  game: Game;\n  app: App;\n\n  @observable connected: boolean = false;\n\n  constructor() {\n    this.conn = new Connection();\n    this.game = new Game();\n    this.app = new App();\n    this.init();\n  }\n\n  @action init = () => {\n  }\n}\n\nconst StoreContext = React.createContext<Store>(new Store());\nexport const useStore = () => React.useContext(StoreContext);\n","import React, { useEffect, useRef } from 'react';\nimport select from 'selection-range';\nimport { useDocumentVisibility } from '../common/hooks';\n\nimport './Command.css';\n\nimport { TCommandTree } from '../common/commands';\nimport { useStore } from '../store';\nimport { observer } from 'mobx-react';\n\ntype Props = {\n  commandTree: TCommandTree,\n  onCommand: (cmd: string) => void,\n};\n\nconst EMPTY_CHAR = '\\u2063';\n\nconst Command = observer((props: Props) => {\n\n  // command line input variables\n  const cmdRef = useRef<HTMLDivElement|null>(null);\n  const cursorPos = useRef<number>(0);\n  const currentlyEntering = useRef(''); // only used to pass previously entered text to password input when switching to maskedEcho mode\n\n  // commands history variables\n  const cmdHistory = useRef<Array<string>>([]);\n  const cmdHistoryPointer = useRef<number|null>(null);\n  const cmdValueBeforeArrowsWerePressed = useRef<string|null>(null);\n  \n  // store variables\n  const store = useStore();\n  const { maskEcho } = store.conn;\n\n  // focus on commandline when tab is focused\n  const documentVisibility = useDocumentVisibility();\n  useEffect(\n    () => {\n      if (documentVisibility === 'visible') {\n        focusToCmdLine();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ documentVisibility ]\n  );\n\n  const resetCmdLine = () => {\n    if (cmdRef.current) {\n      cmdRef.current.innerHTML = `<span>${EMPTY_CHAR}</span>`;\n      cursorPos.current = 0;\n    }\n  }\n\n  const focusToCmdLine = () => {\n    if (cmdRef.current) {\n      if (cmdRef.current.innerText === '') {\n        resetCmdLine()\n      }\n      cmdRef.current.focus();\n      select(cmdRef.current, {start: cursorPos.current});\n    }\n  }\n\n  const selectAllCmdLine = () => {\n    const selection = document.getSelection();\n    if (selection && cmdRef.current) {\n      selection.selectAllChildren(cmdRef.current);\n      currentlyEntering.current = '';\n    }    \n  }\n\n  const moveCursorToEnd = () => {\n    if (cmdRef.current) {\n      select(cmdRef.current, {start: cmdRef.current.innerHTML.length});\n      cursorPos.current = cmdRef.current.innerHTML.length;\n    }\n  }\n\n  const updateCursorPos = () => {\n    setTimeout(() => {\n      if (cmdRef.current) {\n        const pos = select(cmdRef.current);\n        if (pos) {\n          cursorPos.current = pos.end || pos.start;\n        }\n      }\n    },0);\n  }\n\n  const checkCmdLineForEmptyIssue = () => {\n    // cleaning any remains of HTML tag if the cmd line text is empty\n    if (cmdRef.current && cmdRef.current.innerText.replace(/\\n\\r/g, '') === '') {\n      resetCmdLine();\n    }\n  }\n\n  const cleanUpCmd = (cmd: string): string => {\n    return cmd.replace(EMPTY_CHAR, '').replace(/\\n\\r/g, ' ');\n  }\n\n  const maskInputChars = (input: string): string => {\n    return input\n      .replace(EMPTY_CHAR, '')\n      .split('')\n      .map((char) => `<span class=\"maskedChar\">${char}</span>`)\n      .join('');\n  }\n\n  // key pressed anywhere in the app should be redirected to command line\n  const handleGlobalKeydown = (event: KeyboardEvent) => {\n    const isCtrlPressed = (event: KeyboardEvent) => {\n      return ['Control', 'Meta'].includes(event.key) || event.ctrlKey || event.metaKey;\n    }\n    if(!isCtrlPressed(event) && cmdRef.current && event.currentTarget) {\n      const srcElement = event.srcElement as HTMLElement;\n      if (srcElement.id !== cmdRef.current.id) {\n        const newEvent = new KeyboardEvent('keydown', { key: event.key });\n        focusToCmdLine();\n        cmdRef.current.dispatchEvent(newEvent);\n      }\n    }\n  }\n\n  // only run once on component mount\n  useEffect(\n    () => { \n      document.addEventListener('keydown', handleGlobalKeydown as EventListener, false);\n      window.onfocus = focusToCmdLine;\n      setTimeout(() => {\n        checkCmdLineForEmptyIssue();\n        focusToCmdLine();\n      }, 100);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  useEffect(\n    () => {\n      if (!cmdRef.current) {\n        return;\n      }\n      if (maskEcho) {\n        if (currentlyEntering.current) {\n          cmdRef.current.innerHTML = maskInputChars(cmdRef.current.innerText);\n        } else {\n          resetCmdLine();\n        }\n        focusToCmdLine();\n      } else {\n        cmdRef.current.innerHTML = cmdRef.current.innerText;\n      }\n    },\n    [ maskEcho ]\n  );\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!cmdRef.current) { return; }\n    checkCmdLineForEmptyIssue();\n\n    if (event.key === 'Escape') {\n      resetCmdLine();\n    }\n\n    // handling Enter key\n    if (event.key === 'Enter') {\n      const cleanCmd = cleanUpCmd(event.currentTarget.innerText).trim();\n      // send out command\n      props.onCommand(cleanCmd);\n      // cancel the event\n      event.preventDefault();\n\n      if (!maskEcho) {\n        checkCmdLineForEmptyIssue();\n        // select everything in the field\n        if (cleanCmd !== '') {\n          selectAllCmdLine();\n        }\n        // add to history, only if unique to last entered\n        if (!cmdHistory.current.length || ( cleanCmd !== '' && cmdHistory.current[cmdHistory.current.length - 1] !== cleanCmd)) {\n          cmdHistory.current.push(cleanCmd);\n        }\n      } else {\n        resetCmdLine()      \n      }\n\n      const newEvent = new Event('needsScroll');\n      document.dispatchEvent(newEvent);\n\n      cmdHistoryPointer.current = null;\n    }\n\n    // handling history\n    if (event.key === 'ArrowUp') {\n      if (cmdHistory.current.length) {\n        let historyIndex = cmdHistoryPointer.current !== null ? --cmdHistoryPointer.current : cmdHistory.current.length - 1;\n        historyIndex = historyIndex < 0 ? 0 : historyIndex;\n        if (cmdHistoryPointer.current === null && cmdHistory.current[historyIndex] === cmdRef.current.innerText) {\n          historyIndex = historyIndex - 1 < 0 ? 0 : --historyIndex;\n        }\n        cmdRef.current.innerText = cmdHistory.current[historyIndex];\n        cmdHistoryPointer.current = historyIndex;\n        setTimeout(() => moveCursorToEnd(), 0);\n        cmdValueBeforeArrowsWerePressed.current = cmdRef.current.innerText;\n      }\n    }\n    if (event.key === 'ArrowDown') {\n      if (cmdHistory.current.length && cmdHistoryPointer.current !== null) {\n        let historyIndex = cmdHistoryPointer.current;\n        historyIndex =  historyIndex < cmdHistory.current.length - 1 ? ++historyIndex : cmdHistory.current.length - 1;\n        cmdHistoryPointer.current = historyIndex;\n        cmdRef.current.innerText = cmdHistory.current[historyIndex];\n        setTimeout(() => moveCursorToEnd(), 0);\n        cmdValueBeforeArrowsWerePressed.current = cmdRef.current.innerText;\n      }\n    }\n\n    event.stopPropagation();\n    updateCursorPos();\n    setTimeout(checkCmdLineForEmptyIssue, 100);\n  };\n\n  const handleInput = (event: React.SyntheticEvent<HTMLDivElement>) => {\n    setTimeout(() => {\n      if (!cmdRef.current) { return; }\n      checkCmdLineForEmptyIssue();\n\n      let outputLine = '';\n      if (!maskEcho) {\n        // parsing entered text into HTML tags\n        let inputLine = cleanUpCmd(cmdRef.current.innerText);\n        outputLine = '<span>' + inputLine + '<span>';        \n      } else {\n        outputLine = maskInputChars(cmdRef.current.innerText);\n      }\n\n      // updating the input field\n      const pos = select(cmdRef.current);\n      cmdRef.current.innerHTML = outputLine;\n      select(cmdRef.current, pos);\n\n      updateCursorPos();\n\n      // updating some flow variables\n      currentlyEntering.current = cmdRef.current.innerText;\n      if (cmdRef.current.innerText !== cmdValueBeforeArrowsWerePressed.current) {\n        cmdHistoryPointer.current = null;\n      }\n    }, 0);\n  };\n\n  return (\n    <div\n      className=\"command\"\n      id=\"commandLine\"\n      ref={cmdRef}\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      onClick={updateCursorPos}\n      onInput={handleInput}\n      contentEditable\n    />\n  )\n});\n\nexport default Command;","import React, { useEffect, useRef, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { useStore } from '../store';\n\nimport './Console.css';\n\ntype Props = {\n};\n\nconst Console = observer((props: Props) => {\n  const store = useStore();\n  const { console: consoleObj, consoleCount } = store.conn;\n  const consoleRef = useRef<HTMLDivElement>(null);\n  const [isAtBottom, setIsAtBottom] = useState<boolean>(false);\n  \n  const scrollDown = (el: HTMLDivElement | null) => {\n    if (!el || !el.parentElement) {\n      return;\n    }\n    el.parentElement.scrollTo(0, el.scrollHeight);\n    setIsAtBottom(true);\n  }\n  \n  const checkIsAtBottom = (current: HTMLDivElement): boolean => {\n    if (current.parentElement) {\n      return current.scrollHeight <= current.clientHeight\n          || current.scrollHeight - current.clientHeight - current.parentElement.scrollTop < 1\n    }\n    return true;\n  }\n\n  const handleGlobalKeydown = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      scrollDown(consoleRef.current);\n    }\n  }\n\n  const handleNeedScrollEvent = (event: Event) => {\n    scrollDown(consoleRef.current)\n  }\n\n  useEffect(\n    () => {\n      document.addEventListener('keydown', handleGlobalKeydown as EventListener, false);\n      document.addEventListener('needsScroll', handleNeedScrollEvent as EventListener, false);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const { current } = consoleRef;\n  if (current) {\n    const isAtBottomNow = checkIsAtBottom(current);\n    if (isAtBottom !== isAtBottomNow) {\n      setIsAtBottom(isAtBottomNow);\n    }\n  }\n\n  useEffect(() => {\n    const { current } = consoleRef;\n    if (current && isAtBottom) {\n      scrollDown(current);\n    }\n  });\n\n  return (\n    <div\n      className={`console hash${consoleCount}`}\n      ref={consoleRef}\n    >\n      { consoleObj.map(\n        (line) => line.formatted\n      ) }\n      {!isAtBottom ? (\n        <div className=\"scrollToBottom\">\n          <span className=\"desktop\">⇩ Wciśnij <kbd>ESC</kbd> by przewinąć na dół</span>\n          <span className=\"mobile\">\n            <button onClick={(e) => {\n              e.preventDefault();\n              scrollDown(consoleRef.current);\n            }}>\n              <span className=\"material-icons\">keyboard_arrow_down</span>\n            </button>\n          </span>\n        </div>\n      ) : null}\n    </div>\n  );\n});\n\nexport default Console;","import React from 'react';\n\nimport { useStore } from '../../store';\nimport { observer } from 'mobx-react';\n\nconst Settings = observer(() => {\n  const store = useStore();\n  const { theme, setThemeColor, setThemeFont, showSettings } = store.app;\n\n  return (\n    <div className=\"settings\" style={{ display: showSettings ? 'block' : 'none' }}>\n      colorBase: {theme.color.colorBase}\n      <input type=\"range\" min=\"0\" max=\"255\"\n        value={theme.color.colorBase}\n        onChange={(el) => setThemeColor({\n          colorBase: parseInt(el.currentTarget.value),\n        })}\n      />\n      colorTop: {theme.color.colorTop}\n      <input type=\"range\" min=\"1\" max=\"255\"\n        value={theme.color.colorTop}\n        onChange={(el) => setThemeColor({\n          colorTop: parseInt(el.currentTarget.value),\n        })}\n      />\n      saturation: {theme.color.saturation}\n      <input type=\"range\" min=\"0\" max=\"100\"\n        value={100 * theme.color.saturation}\n        onChange={(el) => setThemeColor({\n          saturation: parseInt(el.currentTarget.value) / 100,\n        })}\n      />\n      brightBoost: {theme.color.brightBoost}\n      <input type=\"range\" min=\"0\" max=\"100\"\n        value={100 * theme.color.brightBoost}\n        onChange={(el) => setThemeColor({\n          brightBoost: parseInt(el.currentTarget.value) / 100,\n        })}\n      />\n      backgroundHinder: {theme.color.backgroundHinder}\n      <input type=\"range\" min=\"0\" max=\"100\"\n        value={100 * theme.color.backgroundHinder}\n        onChange={(el) => setThemeColor({\n          backgroundHinder: parseInt(el.currentTarget.value) / 100,\n        })}\n      />\n      blackBoost: {theme.color.blackBoost}\n      <input type=\"range\" min=\"0\" max=\"100\"\n        value={100 * theme.color.blackBoost}\n        onChange={(el) => setThemeColor({\n          blackBoost: parseInt(el.currentTarget.value) / 100,\n        })}\n      />\n      font: {theme.font.family}\n      <select onChange={(e)=>{ setThemeFont({ family: e.target.value }); }}>\n        <option value=\"Roboto Mono\">Roboto Mono</option>\n        <option value=\"Inconsolata\">Inconsolata</option>\n        <option value=\"Cousine\">Cousine</option>\n        <option value=\"Source Code Pro\">Source Code Pro</option>\n        <option value=\"Anonymous Pro\">Anonymous Pro</option>\n        <option value=\"Fira Code\">Fira Code</option>\n        <option value=\"IBM Plex Mono\">IBM Plex Mono</option>\n        <option value=\"Nanum Gothic Coding\">Nanum Gothic Coding</option>\n        <option value=\"Ubuntu Mono\">Ubuntu Mono</option>\n      </select>\n      font size: {theme.font.size}px\n      <input type=\"range\" min=\"10\" max=\"30\"\n        value={theme.font.size}\n        onChange={(el) => setThemeFont({\n          size: parseInt(el.currentTarget.value),\n        })}\n      />\n      <br />\n      letter spacing: {theme.font.letterSpacing}\n      <input type=\"range\" min=\"0\" max=\"5\"\n        value={theme.font.letterSpacing}\n        onChange={(el) => setThemeFont({\n          letterSpacing: parseInt(el.currentTarget.value),\n        })}\n      />\n      <br />\n      line height: {theme.font.lineHeight}\n      <input type=\"range\" min=\"80\" max=\"150\"\n        value={theme.font.lineHeight}\n        onChange={(el) => setThemeFont({\n          lineHeight: parseInt(el.currentTarget.value),\n        })}\n      />\n    </div>\n  );\n});\n\nexport default Settings;","import React from 'react';\n\nimport { testCommandTree } from '../common/commands';\n\nimport Command from './Command';\nimport Console from './Console';\n\nimport { useStore } from '../store';\nimport { observer } from 'mobx-react';\n\nimport './App.css';\nimport Settings from './common/Settings';\n\nconst App = observer(() => {\n  const store = useStore();\n  //const { loadedFonts, theme } = store.app;\n  //const { family } = theme.font;\n\n  // TODO sprawdzic czemu to nie dziala\n  const isCurrentFontLoaded = true\n  //const isCurrentFontLoaded = loadedFonts.includes(family + ':400') && loadedFonts.includes(family + ':700');\n\n  return (\n    <>\n      {!isCurrentFontLoaded ? (\n        <div className=\"loadingCover\">\n          <div className=\"sk-chase\">\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n          </div>\n        </div>\n      ) : null}\n      <div className=\"app\">\n        <div className=\"topSide\">\n          <div className=\"leftAndRightSide\">\n            <div className=\"leftSide\">\n              <Console />\n            </div>\n            <div className=\"rightSide\">\n              { /* <MudMap /> */ }\n              <Settings />\n            </div>\n          </div>\n        </div>\n        <div className=\"bottomSide\">\n          <div className=\"leftAndRightSide\">\n            <div className=\"leftSide\">\n              <Command onCommand={(cmd) => { store.conn.sendCmd(cmd) }} commandTree={testCommandTree} />\n            </div>\n            <div className=\"rightSide\">\n              <div className=\"settingsBtn\">\n                <button onClick={store.app.toogleSettings} tabIndex={1}>\n                  <span className=\"material-icons\">settings</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}